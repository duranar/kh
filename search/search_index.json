{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"first/","title":"First","text":"<p>This is the first real page</p>"},{"location":"py-venv/","title":"Python Virtual Environments (<code>venv</code>) Workflow","text":"<p>The <code>venv</code> Folder is Not Portable</p> <p>Do not manually move, copy, or rename the <code>venv</code> folder. The activation scripts inside it contain absolute paths. If you need to move a project, the correct procedure is to <code>pip freeze</code> your requirements, delete the old <code>venv</code> folder, move the project, and then create a new <code>venv</code> in the new location and install from <code>requirements.txt</code>.</p>"},{"location":"py-venv/#1-initial-project-setup","title":"1. Initial Project Setup","text":"<p>Do this once when you start a new project.</p>"},{"location":"py-venv/#step-1-create-the-virtual-environment","title":"Step 1: Create the Virtual Environment","text":"<p>Navigate to your project's root folder in the terminal and run the following command. This creates a new folder (named <code>venv</code> here) containing the Python interpreter and standard libraries.</p> <pre><code># Recommended to use Python 3\npython -m venv venv\n</code></pre> <p>Best Practice: Name it <code>venv</code></p> <p>Naming the folder <code>venv</code> or <code>.venv</code> is a common convention that makes it easily recognizable.</p>"},{"location":"py-venv/#step-2-add-venv-to-gitignore","title":"Step 2: Add <code>venv</code> to <code>.gitignore</code>","text":"<p>You must NEVER commit the <code>venv</code> folder</p> <p>The <code>venv</code> folder should NEVER be committed to source control (like Git). It contains machine-specific paths and can be very large. Create or open your <code>.gitignore</code> file and add the following lines.</p> <pre><code># .gitignore\n\n# Python virtual environment\nvenv/\n.venv/\n\n# Python cache\n__pycache__/\n*.pyc\n</code></pre>"},{"location":"py-venv/#2-daily-workflow","title":"2. Daily Workflow","text":"<p>Follow these steps every time you work on the project.</p>"},{"location":"py-venv/#step-3-activate-the-environment","title":"Step 3: Activate the Environment","text":"<p>Before you can use the environment, you must \"activate\" it. The command differs by operating system.</p> Windows macOS / Linux PowerShell:<code>.\\venv\\Scripts\\Activate</code> Terminal:<code>source venv/bin/activate</code> <p>After activation, you will see the environment's name in your terminal prompt, like <code>(venv) C:\\Users\\YourUser\\MyProject&gt;</code>.</p>"},{"location":"py-venv/#step-4-upgrade-pip-recommended","title":"Step 4: Upgrade Pip (Recommended)","text":"<p>Once activated, it's good practice to ensure <code>pip</code> (Python's package installer) is up to date.</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>"},{"location":"py-venv/#step-5-install-and-manage-packages","title":"Step 5: Install and Manage Packages","text":"<p>Now you can install packages for your project. They will be installed only inside the active <code>venv</code>.</p> <pre><code># Example: Installing the MkDocs package\npip install mkdocs\n\n# To see what's installed in the current venv\npip list\n</code></pre>"},{"location":"py-venv/#step-6-deactivate-the-environment","title":"Step 6: Deactivate the Environment","text":"<p>When you're finished working, you can deactivate the environment to return to your global Python context.</p> <pre><code>deactivate\n</code></pre>"},{"location":"py-venv/#3-collaboration-and-replication","title":"3. Collaboration and Replication","text":"<p>This is how you share your project's dependencies with others or set it up on a new machine.</p>"},{"location":"py-venv/#step-7-create-a-requirementstxt-file","title":"Step 7: Create a <code>requirements.txt</code> File","text":"<p>This file is a list of all the packages your project needs. To generate it automatically from your currently installed packages, run:</p> <p><pre><code>pip freeze &gt; requirements.txt\n</code></pre> Commit this <code>requirements.txt</code> file to your source control. It's the key to recreating the environment.</p>"},{"location":"py-venv/#step-8-install-dependencies-from-requirementstxt","title":"Step 8: Install Dependencies from <code>requirements.txt</code>","text":"<p>When you (or a collaborator) set up the project on a new machine, follow these steps:</p> <ol> <li>Clone the repository from Git.</li> <li>Create and activate the virtual environment (Steps 1 &amp; 3).</li> <li>Install all dependencies in one command using the requirements file:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"}]}